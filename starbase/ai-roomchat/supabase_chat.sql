
create table if not exists public.messages (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  user_id uuid not null references auth.users(id) on delete cascade,
  owner_id uuid not null references auth.users(id) on delete cascade,
  username text not null,
  avatar_url text,
  hero_id uuid references public.heroes(id) on delete set null,
  scope text not null default 'global',
  target_hero_id uuid references public.heroes(id) on delete set null,
  text text not null check (length(text) between 1 and 2000),
  metadata jsonb
);

alter table public.messages
  add column if not exists created_at timestamptz not null default now();

alter table public.messages
  add column if not exists user_id uuid;

alter table public.messages
  add column if not exists owner_id uuid;

alter table public.messages
  add column if not exists username text;

alter table public.messages
  add column if not exists avatar_url text;

alter table public.messages
  add column if not exists hero_id uuid;

alter table public.messages
  add column if not exists scope text;

alter table public.messages
  add column if not exists target_hero_id uuid;

alter table public.messages
  add column if not exists text text;

alter table public.messages
  add column if not exists metadata jsonb;

update public.messages
set user_id = coalesce(user_id, owner_id)
where user_id is null;

update public.messages
set owner_id = coalesce(owner_id, user_id)
where owner_id is null;

alter table public.messages
  alter column user_id set not null;

alter table public.messages
  alter column owner_id set not null;

alter table public.messages
  alter column username set not null;

alter table public.messages
  alter column text set not null;

alter table public.messages
  alter column scope set default 'global';

update public.messages
set scope = 'global'
where scope is null;

alter table public.messages
  alter column scope set not null;

alter table public.messages
  alter column created_at set default now();

alter table public.messages
  alter column created_at set not null;

do $$
begin
  if exists (
    select 1
    from pg_constraint
    where conname = 'messages_user_id_fkey'
      and conrelid = 'public.messages'::regclass
  ) then
    alter table public.messages
      drop constraint messages_user_id_fkey;
  end if;
  if exists (
    select 1
    from pg_constraint
    where conname = 'messages_owner_id_fkey'
      and conrelid = 'public.messages'::regclass
  ) then
    alter table public.messages
      drop constraint messages_owner_id_fkey;
  end if;
  if exists (
    select 1
    from pg_constraint
    where conname = 'messages_hero_id_fkey'
      and conrelid = 'public.messages'::regclass
  ) then
    alter table public.messages
      drop constraint messages_hero_id_fkey;
  end if;
  if exists (
    select 1
    from pg_constraint
    where conname = 'messages_target_hero_id_fkey'
      and conrelid = 'public.messages'::regclass
  ) then
    alter table public.messages
      drop constraint messages_target_hero_id_fkey;
  end if;
end $$;

do $$
begin
  if not exists (
    select 1
    from pg_constraint
    where conname = 'messages_user_id_fkey'
      and conrelid = 'public.messages'::regclass
  ) then
    alter table public.messages
      add constraint messages_user_id_fkey
      foreign key (user_id) references auth.users(id) on delete cascade;
  end if;
  if not exists (
    select 1
    from pg_constraint
    where conname = 'messages_owner_id_fkey'
      and conrelid = 'public.messages'::regclass
  ) then
    alter table public.messages
      add constraint messages_owner_id_fkey
      foreign key (owner_id) references auth.users(id) on delete cascade;
  end if;
  if not exists (
    select 1
    from pg_constraint
    where conname = 'messages_hero_id_fkey'
      and conrelid = 'public.messages'::regclass
  ) then
    alter table public.messages
      add constraint messages_hero_id_fkey
      foreign key (hero_id) references public.heroes(id) on delete set null;
  end if;
  if not exists (
    select 1
    from pg_constraint
    where conname = 'messages_target_hero_id_fkey'
      and conrelid = 'public.messages'::regclass
  ) then
    alter table public.messages
      add constraint messages_target_hero_id_fkey
      foreign key (target_hero_id) references public.heroes(id) on delete set null;
  end if;
end $$;

alter table public.messages enable row level security;

create policy if not exists messages_select_public
on public.messages for select
using (true);

create policy if not exists messages_insert_auth
on public.messages for insert to authenticated
with check (
  auth.uid() = user_id
  and owner_id = auth.uid()
);

create index if not exists messages_created_at_desc on public.messages (created_at desc);
create index if not exists messages_scope_created_at on public.messages (scope, created_at desc);
create index if not exists messages_hero_scope_created_at on public.messages (hero_id, scope, created_at desc);
create index if not exists messages_target_scope_created_at on public.messages (target_hero_id, scope, created_at desc);
