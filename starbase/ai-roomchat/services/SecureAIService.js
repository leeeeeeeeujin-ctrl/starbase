/**
 * üîê ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Ïö© Î≥¥Ïïà Í∞ïÌôîÎêú AI ÏÑúÎπÑÏä§
 * Ïù¥Ï†ú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú API ÌÇ§Í∞Ä ÎÖ∏Ï∂úÎêòÏßÄ ÏïäÏùå!
 */

'use client'

class SecureAIService {
  constructor() {
    this.userToken = null
    this.tokenExpiry = null
  }
  
  // JWT ÌÜ†ÌÅ∞ Í¥ÄÎ¶¨
  async ensureValidToken() {
    // ÌÜ†ÌÅ∞Ïù¥ ÏóÜÍ±∞ÎÇò ÎßåÎ£åÎêòÏóàÏúºÎ©¥ ÏÉàÎ°ú Î∞úÍ∏â
    if (!this.userToken || !this.tokenExpiry || Date.now() > this.tokenExpiry) {
      await this.refreshToken()
    }
    return this.userToken
  }
  
  async refreshToken() {
    try {
      // ÏàòÌçºÎ≤†Ïù¥Ïä§ Ïù∏Ï¶ùÏùÑ ÌÜµÌï¥ JWT ÌÜ†ÌÅ∞ Î∞úÍ∏â
      const response = await fetch('/api/auth/get-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // ÏàòÌçºÎ≤†Ïù¥Ïä§ ÏÑ∏ÏÖò ÌÜ†ÌÅ∞ ÏÇ¨Ïö©
          'Authorization': `Bearer ${this.getSupabaseSession()}`
        }
      })
      
      if (!response.ok) {
        throw new Error('Token refresh failed')
      }
      
      const data = await response.json()
      this.userToken = data.token
      this.tokenExpiry = Date.now() + (23 * 60 * 60 * 1000) // 23ÏãúÍ∞Ñ ÌõÑ ÎßåÎ£å
      
    } catch (error) {
      console.error('Token refresh error:', error)
      throw new Error('Authentication failed')
    }
  }
  
  getSupabaseSession() {
    // Ïã§Ï†úÎ°úÎäî supabase.auth.getSession()ÏóêÏÑú Í∞ÄÏ†∏Ïò¥
    if (typeof window !== 'undefined') {
      return localStorage.getItem('supabase.auth.token')
    }
    return null
  }
  
  // Î≥¥Ïïà Í∞ïÌôîÎêú AI API Ìò∏Ï∂ú
  async callAI(provider, model, messages, projectId = null) {
    try {
      const token = await this.ensureValidToken()
      
      const response = await fetch('/api/ai/secure-proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          token,
          provider,
          model,
          messages,
          projectId
        })
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'AI API call failed')
      }
      
      return await response.json()
      
    } catch (error) {
      console.error('Secure AI call error:', error)
      throw error
    }
  }
  
  // Ìé∏Ïùò Î©îÏÑúÎìúÎì§
  async chatCompletion(provider, model, userMessage, systemPrompt = '', projectId = null) {
    const messages = []
    
    if (systemPrompt) {
      messages.push({ role: 'system', content: systemPrompt })
    }
    
    messages.push({ role: 'user', content: userMessage })
    
    const result = await this.callAI(provider, model, messages, projectId)
    
    // ÏùëÎãµ ÌòïÏãù Ï†ïÍ∑úÌôî
    let aiMessage = ''
    if (provider === 'openai') {
      aiMessage = result.response.choices[0]?.message?.content || ''
    } else if (provider === 'anthropic') {
      aiMessage = result.response.content[0]?.text || ''
    } else if (provider === 'google') {
      aiMessage = result.response.candidates[0]?.content?.parts[0]?.text || ''
    }
    
    return {
      success: true,
      message: aiMessage,
      metadata: result.metadata
    }
  }
  
  // ÏΩîÎìú ÏÉùÏÑ± ÌäπÌôî Î©îÏÑúÎìú
  async generateCode(language, prompt, projectId = null) {
    const systemPrompt = `ÎãπÏã†ÏùÄ ${language} Ï†ÑÎ¨∏ Í∞úÎ∞úÏûêÏûÖÎãàÎã§. ÏÇ¨Ïö©ÏûêÏùò ÏöîÏ≤≠Ïóê Îî∞Îùº ÍπîÎÅîÌïòÍ≥† Ïã§Ìñâ Í∞ÄÎä•Ìïú ÏΩîÎìúÎ•º ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî. ÏΩîÎìúÏóêÎäî Ï£ºÏÑùÏùÑ Ìè¨Ìï®ÌïòÍ≥†, ÏóêÎü¨ Ï≤òÎ¶¨ÎèÑ Í≥†Î†§Ìï¥Ï£ºÏÑ∏Ïöî.`
    
    try {
      // ÏÇ¨Ïö© Í∞ÄÎä•Ìïú AI ÏÑ§Ï†ï Ï§ëÏóêÏÑú ÏûêÎèô ÏÑ†ÌÉù
      const bestConfig = await this.getBestAvailableConfig(language)
      
      if (!bestConfig) {
        throw new Error('ÏÇ¨Ïö© Í∞ÄÎä•Ìïú AI ÏÑ§Ï†ïÏù¥ ÏóÜÏäµÎãàÎã§')
      }
      
      const result = await this.chatCompletion(
        bestConfig.provider,
        bestConfig.model,
        prompt,
        systemPrompt,
        projectId
      )
      
      return {
        ...result,
        language,
        generatedCode: this.extractCode(result.message, language)
      }
      
    } catch (error) {
      console.error('Code generation error:', error)
      return {
        success: false,
        error: error.message
      }
    }
  }
  
  // ÏΩîÎìú Ï∂îÏ∂ú (ÎßàÌÅ¨Îã§Ïö¥ÏóêÏÑú ÏΩîÎìú Î∏îÎ°ù Ï∂îÏ∂ú)
  extractCode(text, language) {
    const codeBlockRegex = new RegExp(`\`\`\`${language}?\\n([\\s\\S]*?)\\n\`\`\``, 'g')
    const matches = [...text.matchAll(codeBlockRegex)]
    
    if (matches.length > 0) {
      return matches.map(match => match[1]).join('\n\n')
    }
    
    // ÏΩîÎìú Î∏îÎ°ùÏù¥ ÏóÜÏúºÎ©¥ Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏ Î∞òÌôò
    return text
  }
  
  // ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏµúÏ†ÅÏùò AI ÏÑ§Ï†ï ÏûêÎèô ÏÑ†ÌÉù
  async getBestAvailableConfig(language = null) {
    try {
      const token = await this.ensureValidToken()
      
      const response = await fetch('/api/ai/get-user-configs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ token })
      })
      
      if (!response.ok) {
        throw new Error('Failed to get AI configs')
      }
      
      const data = await response.json()
      const configs = data.configs || []
      
      // Ïñ∏Ïñ¥Î≥Ñ ÏµúÏ†Å Î™®Îç∏ ÏÑ†ÌÉù Î°úÏßÅ
      const preferences = {
        javascript: ['gpt-4', 'claude-3-opus', 'gemini-pro'],
        python: ['gpt-4', 'claude-3-opus', 'gemini-pro'],
        sql: ['gpt-4', 'claude-3-opus'],
        default: ['gpt-4', 'claude-3-opus', 'gemini-pro']
      }
      
      const preferredModels = preferences[language] || preferences.default
      
      // ÏÑ†Ìò∏ÎèÑ ÏàúÏúºÎ°ú ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏÑ§Ï†ï Ï∞æÍ∏∞
      for (const model of preferredModels) {
        const config = configs.find(c => 
          c.enabled && 
          c.test_status === 'success' &&
          c.model_name.includes(model.split('-')[0]) // gpt-4 -> gpt Îß§Ïπò
        )
        
        if (config) {
          return {
            provider: config.provider,
            model: config.model_name
          }
        }
      }
      
      // ÏïÑÎ¨¥Í±∞ÎÇò ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Í≤É
      const anyConfig = configs.find(c => c.enabled && c.test_status === 'success')
      return anyConfig ? {
        provider: anyConfig.provider,
        model: anyConfig.model_name
      } : null
      
    } catch (error) {
      console.error('Error getting AI configs:', error)
      return null
    }
  }
  
  // ÏÇ¨Ïö©Îüâ ÌÜµÍ≥Ñ Ï°∞Ìöå
  async getUsageStats() {
    try {
      const token = await this.ensureValidToken()
      
      const response = await fetch('/api/ai/usage-stats', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ token })
      })
      
      if (!response.ok) {
        throw new Error('Failed to get usage stats')
      }
      
      return await response.json()
      
    } catch (error) {
      console.error('Error getting usage stats:', error)
      return { success: false, error: error.message }
    }
  }
}

// Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§
const secureAIService = new SecureAIService()

export default secureAIService
export { SecureAIService }