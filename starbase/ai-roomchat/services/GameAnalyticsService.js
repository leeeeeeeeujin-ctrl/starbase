/**
 * üìä Ïã§ÏãúÍ∞Ñ Í≤åÏûÑ Î∂ÑÏÑù Î∞è Î™®ÎãàÌÑ∞ÎßÅ ÏÑúÎπÑÏä§
 * ÏÑ±Îä•, ÏÇ¨Ïö©Ïûê ÌñâÎèô, Ïò§Î•ò Ï∂îÏ†Å
 */

'use client'

class GameAnalyticsService {
  constructor(config = {}) {
    this.config = {
      batchSize: 50,
      flushInterval: 30000, // 30Ï¥à
      enableConsoleLog: true,
      enablePerformanceTracking: true,
      enableErrorTracking: true,
      enableUserBehaviorTracking: true,
      ...config
    }
    
    this.eventQueue = []
    this.sessionData = this.initSession()
    this.performanceMetrics = new Map()
    this.userActions = []
    this.errorLog = []
    
    // ÏûêÎèô Ï†ÑÏÜ° ÏÑ§Ï†ï
    this.setupAutoFlush()
    
    // ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÏÑ§Ï†ï
    this.setupPerformanceTracking()
    
    // Ïò§Î•ò Ï∂îÏ†Å ÏÑ§Ï†ï
    this.setupErrorTracking()
    
    // ÌéòÏù¥ÏßÄ Ïù¥Î≤§Ìä∏ Ï∂îÏ†Å
    this.setupPageTracking()
  }
  
  // ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî
  initSession() {
    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    
    const sessionData = {
      sessionId,
      startTime: Date.now(),
      userAgent: navigator.userAgent,
      platform: navigator.platform,
      language: navigator.language,
      viewport: {
        width: window.innerWidth,
        height: window.innerHeight
      },
      connection: this.getConnectionInfo(),
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      referrer: document.referrer
    }
    
    this.log('üéØ ÏÉà ÏÑ∏ÏÖò ÏãúÏûë:', sessionData)
    return sessionData
  }
  
  // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Ï†ïÎ≥¥
  getConnectionInfo() {
    if ('connection' in navigator) {
      const conn = navigator.connection
      return {
        effectiveType: conn.effectiveType,
        downlink: conn.downlink,
        rtt: conn.rtt,
        saveData: conn.saveData
      }
    }
    return null
  }
  
  // Í≤åÏûÑ Ïù¥Î≤§Ìä∏ Ï∂îÏ†Å
  trackGameEvent(eventType, data = {}) {
    const event = {
      type: 'game_event',
      eventType,
      sessionId: this.sessionData.sessionId,
      timestamp: Date.now(),
      data,
      url: window.location.href,
      userId: this.getCurrentUserId()
    }
    
    this.addToQueue(event)
    this.log('üéÆ Í≤åÏûÑ Ïù¥Î≤§Ìä∏:', eventType, data)
  }
  
  // ÏÇ¨Ïö©Ïûê ÌñâÎèô Ï∂îÏ†Å
  trackUserAction(action, context = {}) {
    if (!this.config.enableUserBehaviorTracking) return
    
    const actionEvent = {
      type: 'user_action',
      action,
      sessionId: this.sessionData.sessionId,
      timestamp: Date.now(),
      context,
      url: window.location.href,
      userId: this.getCurrentUserId()
    }
    
    this.userActions.push(actionEvent)
    this.addToQueue(actionEvent)
    this.log('üë§ ÏÇ¨Ïö©Ïûê ÌñâÎèô:', action, context)
  }
  
  // ÏÑ±Îä• Î©îÌä∏Î¶≠ Ï∂îÏ†Å
  trackPerformance(metricName, value, unit = 'ms') {
    if (!this.config.enablePerformanceTracking) return
    
    const performanceEvent = {
      type: 'performance_metric',
      metricName,
      value,
      unit,
      sessionId: this.sessionData.sessionId,
      timestamp: Date.now(),
      url: window.location.href
    }
    
    // Î©îÌä∏Î¶≠ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    this.updateMetricStats(metricName, value)
    
    this.addToQueue(performanceEvent)
    this.log('üìä ÏÑ±Îä• Î©îÌä∏Î¶≠:', metricName, `${value}${unit}`)
  }
  
  // Î©îÌä∏Î¶≠ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
  updateMetricStats(metricName, value) {
    if (!this.performanceMetrics.has(metricName)) {
      this.performanceMetrics.set(metricName, {
        count: 0,
        sum: 0,
        min: Infinity,
        max: -Infinity,
        values: []
      })
    }
    
    const stats = this.performanceMetrics.get(metricName)
    stats.count++
    stats.sum += value
    stats.min = Math.min(stats.min, value)
    stats.max = Math.max(stats.max, value)
    stats.values.push(value)
    
    // ÏµúÍ∑º 100Í∞ú Í∞íÎßå Ïú†ÏßÄ
    if (stats.values.length > 100) {
      stats.values = stats.values.slice(-100)
    }
  }
  
  // Ïò§Î•ò Ï∂îÏ†Å
  trackError(error, context = {}) {
    if (!this.config.enableErrorTracking) return
    
    const errorEvent = {
      type: 'error',
      message: error.message || String(error),
      stack: error.stack,
      sessionId: this.sessionData.sessionId,
      timestamp: Date.now(),
      context,
      url: window.location.href,
      userId: this.getCurrentUserId(),
      userAgent: navigator.userAgent
    }
    
    this.errorLog.push(errorEvent)
    this.addToQueue(errorEvent)
    this.log('‚ùå Ïò§Î•ò Ï∂îÏ†Å:', error, context)
    
    // Ïã¨Í∞ÅÌïú Ïò§Î•òÎäî Ï¶âÏãú Ï†ÑÏÜ°
    if (this.isCriticalError(error)) {
      this.flushEvents()
    }
  }
  
  // Ïã¨Í∞ÅÌïú Ïò§Î•ò ÌåêÎã®
  isCriticalError(error) {
    const criticalPatterns = [
      /database/i,
      /network/i,
      /timeout/i,
      /authentication/i,
      /permission/i
    ]
    
    return criticalPatterns.some(pattern => 
      pattern.test(error.message) || pattern.test(error.stack)
    )
  }
  
  // AI ÏöîÏ≤≠ Ï∂îÏ†Å
  trackAIRequest(provider, prompt, responseTime, success, model = null) {
    const aiEvent = {
      type: 'ai_request',
      provider,
      promptLength: prompt.length,
      responseTime,
      success,
      model,
      sessionId: this.sessionData.sessionId,
      timestamp: Date.now(),
      userId: this.getCurrentUserId()
    }
    
    this.addToQueue(aiEvent)
    this.log('ü§ñ AI ÏöîÏ≤≠:', provider, `${responseTime}ms`, success ? '‚úÖ' : '‚ùå')
  }
  
  // ÌéòÏù¥ÏßÄ ÏÑ±Îä• Ï∂îÏ†Å
  trackPagePerformance() {
    if (typeof window.performance !== 'undefined') {
      const navigation = performance.getEntriesByType('navigation')[0]
      if (navigation) {
        this.trackPerformance('page_load_time', navigation.loadEventEnd - navigation.fetchStart)
        this.trackPerformance('dom_content_loaded', navigation.domContentLoadedEventEnd - navigation.fetchStart)
        this.trackPerformance('first_byte_time', navigation.responseStart - navigation.fetchStart)
      }
      
      // Core Web Vitals
      this.trackCoreWebVitals()
    }
  }
  
  // Core Web Vitals Ï∂îÏ†Å
  trackCoreWebVitals() {
    // Largest Contentful Paint (LCP)
    new PerformanceObserver((entryList) => {
      const entries = entryList.getEntries()
      const lastEntry = entries[entries.length - 1]
      this.trackPerformance('lcp', lastEntry.startTime)
    }).observe({ entryTypes: ['largest-contentful-paint'] })
    
    // First Input Delay (FID)
    new PerformanceObserver((entryList) => {
      for (const entry of entryList.getEntries()) {
        this.trackPerformance('fid', entry.processingStart - entry.startTime)
      }
    }).observe({ entryTypes: ['first-input'] })
    
    // Cumulative Layout Shift (CLS)
    let clsValue = 0
    new PerformanceObserver((entryList) => {
      for (const entry of entryList.getEntries()) {
        if (!entry.hadRecentInput) {
          clsValue += entry.value
        }
      }
      this.trackPerformance('cls', clsValue * 1000) // 1000ÏùÑ Í≥±Ìï¥ Îçî ÏùΩÍ∏∞ Ïâ¨Ïö¥ Îã®ÏúÑÎ°ú
    }).observe({ entryTypes: ['layout-shift'] })
  }
  
  // Í≤åÏûÑ ÏÑ∏ÏÖò Î∂ÑÏÑù
  analyzeGameSession(gameData) {
    const analysis = {
      sessionDuration: Date.now() - this.sessionData.startTime,
      totalEvents: this.eventQueue.filter(e => e.type === 'game_event').length,
      userActions: this.userActions.length,
      errors: this.errorLog.length,
      averageResponseTime: this.calculateAverageResponseTime(),
      performanceSummary: this.getPerformanceSummary(),
      gameSpecific: {
        ...gameData,
        completionRate: this.calculateCompletionRate(gameData),
        engagementScore: this.calculateEngagementScore()
      }
    }
    
    this.trackGameEvent('session_analysis', analysis)
    return analysis
  }
  
  // ÌèâÍ∑† ÏùëÎãµ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
  calculateAverageResponseTime() {
    const aiRequests = this.eventQueue.filter(e => e.type === 'ai_request')
    if (aiRequests.length === 0) return 0
    
    const totalTime = aiRequests.reduce((sum, req) => sum + req.responseTime, 0)
    return totalTime / aiRequests.length
  }
  
  // ÏÑ±Îä• ÏöîÏïΩ
  getPerformanceSummary() {
    const summary = {}
    
    for (const [metricName, stats] of this.performanceMetrics.entries()) {
      summary[metricName] = {
        average: stats.sum / stats.count,
        min: stats.min,
        max: stats.max,
        count: stats.count,
        median: this.calculateMedian(stats.values)
      }
    }
    
    return summary
  }
  
  // Ï§ëÏïôÍ∞í Í≥ÑÏÇ∞
  calculateMedian(values) {
    if (values.length === 0) return 0
    
    const sorted = [...values].sort((a, b) => a - b)
    const mid = Math.floor(sorted.length / 2)
    
    if (sorted.length % 2 === 0) {
      return (sorted[mid - 1] + sorted[mid]) / 2
    } else {
      return sorted[mid]
    }
  }
  
  // ÏôÑÎ£åÏú® Í≥ÑÏÇ∞
  calculateCompletionRate(gameData) {
    if (!gameData.totalSteps || gameData.totalSteps === 0) return 0
    return (gameData.completedSteps / gameData.totalSteps) * 100
  }
  
  // Ï∞∏Ïó¨ÎèÑ Ï†êÏàò Í≥ÑÏÇ∞
  calculateEngagementScore() {
    const sessionTime = Date.now() - this.sessionData.startTime
    const actionRate = this.userActions.length / (sessionTime / 60000) // Î∂ÑÎãπ Ïï°ÏÖò Ïàò
    const eventRate = this.eventQueue.length / (sessionTime / 60000) // Î∂ÑÎãπ Ïù¥Î≤§Ìä∏ Ïàò
    
    // 0-100 Ï†êÏàòÎ°ú Ï†ïÍ∑úÌôî
    const engagementScore = Math.min(100, (actionRate * 10) + (eventRate * 5))
    return Math.round(engagementScore)
  }
  
  // ÌÅêÏóê Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
  addToQueue(event) {
    this.eventQueue.push(event)
    
    // Î∞∞Ïπò ÌÅ¨Í∏∞ ÎèÑÎã¨ Ïãú Ï¶âÏãú Ï†ÑÏÜ°
    if (this.eventQueue.length >= this.config.batchSize) {
      this.flushEvents()
    }
  }
  
  // Ïù¥Î≤§Ìä∏ Ï†ÑÏÜ°
  async flushEvents() {
    if (this.eventQueue.length === 0) return
    
    const eventsToSend = [...this.eventQueue]
    this.eventQueue = []
    
    try {
      const response = await fetch('/api/analytics/events', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          sessionId: this.sessionData.sessionId,
          events: eventsToSend,
          sessionData: this.sessionData
        })
      })
      
      if (response.ok) {
        this.log('üì§ Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° ÏÑ±Í≥µ:', eventsToSend.length, 'Í∞ú Ïù¥Î≤§Ìä∏')
      } else {
        console.warn('‚ö†Ô∏è Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Ïã§Ìå®')
        // Ïã§Ìå®Ìïú Ïù¥Î≤§Ìä∏Îì§ÏùÑ Îã§Ïãú ÌÅêÏóê Ï∂îÍ∞Ä
        this.eventQueue.unshift(...eventsToSend)
      }
      
    } catch (error) {
      console.error('‚ùå Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Ïò§Î•ò:', error)
      // Ïã§Ìå®Ìïú Ïù¥Î≤§Ìä∏Îì§ÏùÑ Îã§Ïãú ÌÅêÏóê Ï∂îÍ∞Ä
      this.eventQueue.unshift(...eventsToSend)
    }
  }
  
  // ÏûêÎèô Ï†ÑÏÜ° ÏÑ§Ï†ï
  setupAutoFlush() {
    // Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Ïù¥Î≤§Ìä∏ Ï†ÑÏÜ°
    setInterval(() => {
      this.flushEvents()
    }, this.config.flushInterval)
    
    // ÌéòÏù¥ÏßÄ Ï¢ÖÎ£å Ïãú Ï†ÑÏÜ°
    window.addEventListener('beforeunload', () => {
      if (this.eventQueue.length > 0) {
        // ÎèôÍ∏∞Ï†ÅÏúºÎ°ú Ï†ÑÏÜ° (ÌéòÏù¥ÏßÄ Ï¢ÖÎ£å Ï†ÑÏóê)
        navigator.sendBeacon('/api/analytics/events', JSON.stringify({
          sessionId: this.sessionData.sessionId,
          events: this.eventQueue,
          sessionData: this.sessionData
        }))
      }
    })
  }
  
  // ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÏÑ§Ï†ï
  setupPerformanceTracking() {
    if (!this.config.enablePerformanceTracking) return
    
    // ÌéòÏù¥ÏßÄ Î°úÎìú ÏÑ±Îä• Ï∂îÏ†Å
    window.addEventListener('load', () => {
      setTimeout(() => this.trackPagePerformance(), 0)
    })
    
    // Î¶¨ÏÜåÏä§ Î°úÎî© Î™®ÎãàÌÑ∞ÎßÅ
    new PerformanceObserver((entryList) => {
      for (const entry of entryList.getEntries()) {
        if (entry.duration > 1000) { // 1Ï¥à Ïù¥ÏÉÅ Í±∏Î¶∞ Î¶¨ÏÜåÏä§
          this.trackPerformance('slow_resource_load', entry.duration)
        }
      }
    }).observe({ entryTypes: ['resource'] })
  }
  
  // Ïò§Î•ò Ï∂îÏ†Å ÏÑ§Ï†ï
  setupErrorTracking() {
    if (!this.config.enableErrorTracking) return
    
    // JavaScript Ïò§Î•ò
    window.addEventListener('error', (event) => {
      this.trackError(event.error || new Error(event.message), {
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno
      })
    })
    
    // Promise rejection Ïò§Î•ò
    window.addEventListener('unhandledrejection', (event) => {
      this.trackError(new Error(`Unhandled Promise Rejection: ${event.reason}`), {
        type: 'unhandledrejection'
      })
    })
  }
  
  // ÌéòÏù¥ÏßÄ Ïù¥Î≤§Ìä∏ Ï∂îÏ†Å
  setupPageTracking() {
    // ÌéòÏù¥ÏßÄ Î∞©Î¨∏
    this.trackUserAction('page_view', {
      url: window.location.href,
      title: document.title
    })
    
    // ÌÅ¥Î¶≠ Ï∂îÏ†Å
    document.addEventListener('click', (event) => {
      const element = event.target
      this.trackUserAction('click', {
        tagName: element.tagName,
        className: element.className,
        id: element.id,
        text: element.textContent?.substring(0, 50)
      })
    })
    
    // Ïä§ÌÅ¨Î°§ Ï∂îÏ†Å
    let scrollTimeout
    window.addEventListener('scroll', () => {
      clearTimeout(scrollTimeout)
      scrollTimeout = setTimeout(() => {
        const scrollPercent = (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100
        this.trackUserAction('scroll', {
          scrollPercent: Math.round(scrollPercent)
        })
      }, 1000)
    })
  }
  
  // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ID Í∞ÄÏ†∏Ïò§Í∏∞
  getCurrentUserId() {
    // Supabase ÏÑ∏ÏÖòÏóêÏÑú ÏÇ¨Ïö©Ïûê ID Ï∂îÏ∂ú
    try {
      const session = localStorage.getItem('supabase.auth.token')
      if (session) {
        const parsed = JSON.parse(session)
        return parsed.user?.id
      }
    } catch (error) {
      // Ï°∞Ïö©Ìûà Î¨¥Ïãú
    }
    return null
  }
  
  // Î°úÍ∑∏ Ï∂úÎ†•
  log(...args) {
    if (this.config.enableConsoleLog) {
      console.log('[GameAnalytics]', ...args)
    }
  }
  
  // Ïã§ÏãúÍ∞Ñ ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
  getDashboardData() {
    return {
      session: {
        ...this.sessionData,
        duration: Date.now() - this.sessionData.startTime,
        eventsCount: this.eventQueue.length
      },
      performance: this.getPerformanceSummary(),
      errors: this.errorLog.length,
      userActions: this.userActions.length,
      engagement: this.calculateEngagementScore(),
      recentEvents: this.eventQueue.slice(-10) // ÏµúÍ∑º 10Í∞ú Ïù¥Î≤§Ìä∏
    }
  }
}

export default GameAnalyticsService