#!/usr/bin/env node
/**
 * Starbase Setup Wizard
 * 
 * 대화형 설치 도구 - 활성화할 기능을 선택
 */

const fs = require('fs')
const path = require('path')
const readline = require('readline')

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

const FEATURES = [
  {
    name: 'rank',
    emoji: '🎮',
    title: 'Rank Game System',
    description: '턴제 AI 게임, 매칭 시스템, 세션 관리',
    required: false,
    dependencies: ['character'],
  },
  {
    name: 'maker',
    emoji: '🛠️',
    title: 'Prompt Maker',
    description: '프롬프트 제작 도구, 슬롯 시스템',
    required: false,
    dependencies: [],
  },
  {
    name: 'admin',
    emoji: '👑',
    title: 'Admin Portal',
    description: '관리자 대시보드, 통계, 설정',
    required: false,
    dependencies: [],
  },
  {
    name: 'arena',
    emoji: '⚔️',
    title: 'Arena',
    description: 'PvP 아레나 시스템',
    required: false,
    dependencies: ['character'],
  },
  {
    name: 'chat',
    emoji: '💬',
    title: 'Chat & Messaging',
    description: '채팅, AI 프록시, 메시징',
    required: false,
    dependencies: [],
  },
  {
    name: 'character',
    emoji: '🎭',
    title: 'Character System',
    description: '캐릭터 생성/관리 (다른 기능의 기반)',
    required: true,
    dependencies: [],
  },
  {
    name: 'analytics',
    emoji: '📊',
    title: 'Analytics',
    description: '사용량 추적, 에러 리포팅',
    required: false,
    dependencies: [],
  },
]

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve)
  })
}

async function main() {
  console.log('\n🚀 Welcome to Starbase Setup!\n')
  console.log('Select which features you want to enable:\n')

  const selectedFeatures = new Set()

  // Required features
  FEATURES.filter(f => f.required).forEach(f => {
    selectedFeatures.add(f.name)
    console.log(`${f.emoji} ${f.title} - REQUIRED`)
  })

  console.log('')

  // Optional features
  for (const feature of FEATURES.filter(f => !f.required)) {
    console.log(`\n${feature.emoji} ${feature.title}`)
    console.log(`   ${feature.description}`)
    
    if (feature.dependencies.length > 0) {
      console.log(`   Dependencies: ${feature.dependencies.join(', ')}`)
    }

    const answer = await question(`   Enable? (Y/n): `)
    
    if (!answer || answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
      selectedFeatures.add(feature.name)
      
      // Add dependencies
      feature.dependencies.forEach(dep => {
        if (!selectedFeatures.has(dep)) {
          console.log(`   → Also enabling dependency: ${dep}`)
          selectedFeatures.add(dep)
        }
      })
    }
  }

  console.log('\n📝 Generating configuration...\n')

  // Generate .env.local
  const envContent = FEATURES.map(feature => {
    const enabled = selectedFeatures.has(feature.name)
    return `FEATURE_${feature.name.toUpperCase()}=${enabled}`
  }).join('\n')

  const envPath = path.join(process.cwd(), '.env.local')
  
  // Preserve existing env vars
  let existingEnv = ''
  if (fs.existsSync(envPath)) {
    existingEnv = fs.readFileSync(envPath, 'utf8')
    // Remove old feature flags
    existingEnv = existingEnv.split('\n')
      .filter(line => !line.startsWith('FEATURE_'))
      .join('\n')
  }

  const finalEnv = `${existingEnv}\n\n# Feature Flags (generated by setup)\n${envContent}\n`
  
  fs.writeFileSync(envPath, finalEnv)

  console.log('✅ Configuration saved to .env.local\n')
  console.log('📦 Enabled features:')
  selectedFeatures.forEach(name => {
    const feature = FEATURES.find(f => f.name === name)
    console.log(`   ${feature.emoji} ${feature.title}`)
  })

  console.log('\n🎉 Setup complete! Run `npm run dev` to start.\n')
  
  rl.close()
}

main().catch(error => {
  console.error('Setup failed:', error)
  process.exit(1)
})
