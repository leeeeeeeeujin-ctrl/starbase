name: Apply SQL migration (supabase-cli)

on:
  workflow_dispatch:

jobs:
  apply-sql-cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Supabase CLI (official binary)
        run: |
          set -e
          # Download prebuilt supabase CLI for ubuntu (linux amd64) and install to /usr/local/bin
          # Using the GitHub releases 'latest' download avoids the unsupported global npm install path.
          echo "Downloading supabase CLI binary..."
          curl -L -o /tmp/supabase.tar.gz https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz
          tar -xzf /tmp/supabase.tar.gz -C /tmp
          sudo mv /tmp/supabase /usr/local/bin/supabase
          sudo chmod +x /usr/local/bin/supabase

      - name: Show supabase version
        run: supabase --version

      - name: Run SQL via Supabase CLI
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_PROJECT_URL: ${{ secrets.SUPABASE_PROJECT_URL }}
        run: |
          set -e
          if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ] || [ -z "$SUPABASE_PROJECT_URL" ]; then
            echo "Missing SUPABASE_SERVICE_ROLE_KEY or SUPABASE_PROJECT_URL secret" >&2
            exit 1
          fi

          # Derive project ref from project URL (strip https:// and .supabase.co)
          PROJECT_REF=$(echo "$SUPABASE_PROJECT_URL" | sed -E 's#https?://([^.]*)\..*#\1#')
          echo "Project ref: $PROJECT_REF"

          # Set access token for supabase CLI
          export SUPABASE_ACCESS_TOKEN="$SUPABASE_SERVICE_ROLE_KEY"

          # Try to run SQL file using supabase CLI. The exact command may vary by CLI version.
          # We use `supabase db query --file` and pass the service role key for non-interactive execution.
          supabase db query --file docs/sql/20251025_add_recompute_queue.sql --project-ref "$PROJECT_REF" --service-role-key "$SUPABASE_SERVICE_ROLE_KEY" --yes
